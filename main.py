from aiogram import Bot, types, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import time
from asyncio import sleep

bot = Bot('6705094842:AAFOMtEIBfpKmeTfv62M32D8K3mYKM8TnVk')
dp = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    wait_for_post_delay = State()
    name = State()
    photo = State()
    price = State()
    address = State()
    phone = State()
    category = State()
    description = State()



# Initialize user statistics
user_stats = {}  # key: user chat id, value: (count, last_post_time)

USER_LIMIT = 10
POST_DELAY = 5 * 60



@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    username = message.from_user.first_name

    main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    main_keyboard.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"))
    main_keyboard.add(KeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏—è"))
    main_keyboard.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ"))
    main_keyboard.add(KeyboardButton("–†–µ–∫–ª–∞–º–∞"))
    main_keyboard.add(KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"))

    await bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º —Å–µ–≥–æ–¥–Ω—è?",
                           reply_markup=main_keyboard)


@dp.message_handler(lambda msg: msg.text in ["–†–µ–∫–ª–∞–º–∞", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ","–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ","–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏—è"], state="*")
async def universal_handler(message: types.Message, state: FSMContext):
    if message.text == "–†–µ–∫–ª–∞–º–∞":
        await handle_advertising_button(message)
    elif message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        await handle_feedback_button(message)
    elif message.text == "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ":
        await create_announcement(message)
    elif message.text == "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
        await create_announcement(message)
    elif message.text == "–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏—è":
        await handle_watch_ads_button(message)



@dp.message_handler(lambda message: message.text == "–†–µ–∫–ª–∞–º–∞")
async def handle_advertising_button(message: types.Message):
    await bot.send_message(
        message.chat.id,
        "üì£ –î–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–µ–∫–ª–∞–º–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @Tokapb174 üíº\n" +
        "- - - - - - - -\n" +
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º. üòä"
    )


@dp.message_handler(lambda message: message.text == "–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏—è")
async def handle_watch_ads_button(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–ê–í–¢–û", url="https://t.me/tg_market_avto"),
        InlineKeyboardButton("1000 –ú–ï–õ–û–ß–ï–ô", url="https://t.me/tg_market_1000_melochey"),
        InlineKeyboardButton("–ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨", url="https://t.me/tg_market_nedvizhimost"),
        InlineKeyboardButton("–£–°–õ–£–ì–ò", url="https://t.me/tg_market_yslygi")
    )

    await bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
        reply_markup=keyboard
    )



@dp.message_handler(lambda message: message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def handle_feedback_button(message: types.Message):
    await bot.send_message(
        message.chat.id,
        "üìù –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å üëâ @Tokapb174 ‚úçÔ∏è\n" +
        "- - - - - - - -\n" +
        "(–ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º)"
    )

@dp.message_handler(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def create_announcement(message: types.Message):
    user_chat_id = message.chat.id
    stats = user_stats.get(user_chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    if stats is not None and stats[0] >= USER_LIMIT and int(time.time()) - stats[1] < POST_DELAY:
        remaining_time = POST_DELAY - (int(time.time()) - stats[1])
        mins, sec = divmod(remaining_time + 59, 60)  # –î–æ–±–∞–≤–ª—è–µ—Ç 59 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É.

        reply = f"–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ {USER_LIMIT} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è. " \
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {mins} –º–∏–Ω—É—Ç {sec} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."
        await bot.send_message(user_chat_id, reply)
    else:
        await bot.send_message(user_chat_id, "1‚É£ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Ö–æ—Ä–æ—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ \n\n(–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞—â–∞—é—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫)")
        await Form.name.set()


@dp.message_handler(state=Form.name)
async def handle_announcement_title(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    await bot.send_message(message.chat.id,
                           "2‚É£ –î–æ–±–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ")

    await Form.next()


@dp.message_handler(state=Form.photo, content_types=types.ContentType.PHOTO)
async def handle_announcement_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)

    await bot.send_message(message.chat.id, "3‚É£ –°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ —Ä—É–±–ª—è—Ö)")

    await Form.next()

@dp.message_handler(state=Form.price)
async def handle_announcement_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)

    await bot.send_message(message.chat.id, "4‚É£ –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–¥–µ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É—Å–ª—É–≥–∞ ")

    await Form.next()

@dp.message_handler(state=Form.address)
async def handle_announcement_address(message: types.Message, state: FSMContext):
    if not message.text:
        await bot.send_message(message.chat.id, "–í—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏, –Ω–µ –≤–≤–µ–¥—è –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å.")
    else:
        await state.update_data(address=message.text)

        await bot.send_message(message.chat.id, "5‚É£ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω\n\n(–µ—Å–ª–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–æ –æ–Ω –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –æ—Ç \n–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É\n ‚Äî —ç—Ç–æ –∑–∞—â–∏—Ç–∏—Ç –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)")

        await Form.phone.set()  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —ç—Ç–æ

@dp.message_handler(state=Form.phone)
async def handle_announcement_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)

    await bot.send_message(message.chat.id, "6‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n(—á–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –º–µ–Ω—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º –≤–∞–º –±—É–¥—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å)")



    await Form.category.set()

@dp.message_handler(state=Form.category)
async def handle_announcement_phone(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)

    await bot.send_message(message.chat.id, "–Ω–∞–ø–∏—à–∏—Ç–µ 1 –∏–∑ 4 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π \n- - - - - - -\n"
                                            "–ê–≤—Ç–æ\n"
                                            "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å\n"
                                            "1000 –º–µ–ª–æ—á–µ–π\n"
                                            "—É—Å–ª—É–≥–∏")



    await Form.description.set()


@dp.message_handler(state=Form.description)
async def handle_announcement_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()



    user_chat_id = message.chat.id
    stats = user_stats.get(user_chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await bot.send_photo(
        user_chat_id,
        photo=data['photo'],
        caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n-----------\n–¶–µ–Ω–∞: {data['price']}\n–ê–¥—Ä–µ—Å: {data['address']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è {data['category']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"

    )

    await Form.wait_for_post_delay.set()

    if stats is not None and int(time.time()) - stats[1] < POST_DELAY:
        remaining_time = POST_DELAY - (int(time.time()) - stats[1])
        await bot.send_message(user_chat_id,
                               f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time / 60)} –º–∏–Ω—É—Ç {remaining_time % 60} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        await sleep(remaining_time)  # —Å–æ–Ω –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    await bot.send_photo(
        '-1001989592602',
        photo=data['photo'],
        caption=f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n-----------\n<b>–¶–µ–Ω–∞:</b> {data['price']}\n<b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b> {data['category']}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data['description']}\n-----------\n<b>–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b> @{message.from_user.username}\n",

        parse_mode='HTML'
    )

    if stats is None:
        user_stats[user_chat_id] = (1, int(time.time()))
    else:
        user_stats[user_chat_id] = (stats[0] + 1, int(time.time()))

    remaining_posts = USER_LIMIT - user_stats[user_chat_id][0] if user_stats[user_chat_id][0] < USER_LIMIT else 0
    await bot.send_message(user_chat_id, f'–í—ã –≤—Å—ë –µ—â–µ –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å {remaining_posts} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è.')

    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp)